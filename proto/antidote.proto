syntax = "proto2";

// Java package specifiers
option java_package = "com.basho.riak.protobuf";
option java_outer_classname = "AntidotePB";


enum CRDT_type {
    COUNTER = 3;
    ORSET = 4;
    LWWREG = 5;
    MVREG = 6;
    GMAP = 8;
    RWSET = 10;
    RRMAP = 11;
    FATCOUNTER = 12;
    FLAG_EW = 13;
    FLAG_DW = 14;
    BCOUNTER = 15;
}

// Riak Error response
message ApbErrorResp {
    required bytes errmsg = 1;
    required uint32 errcode = 2;
}

//------------------
// Counter

// Counter increment request
message ApbCounterUpdate {
    // inc indicates the value to be incremented. To decrement, use a negative value. If no value is given, it will be considered as an increment by 1
    optional sint64 inc = 1;
}

// Response operation
message ApbGetCounterResp {
    required sint32 value = 1;
}


//------------------
// Set

// Set updates request
message ApbSetUpdate{
    enum SetOpType // TODO merge adds/removes
    {
        ADD = 1;
        REMOVE = 2;
    }
    required SetOpType optype = 1;
    repeated bytes adds = 2;
    repeated bytes rems = 3;
}

// Get set request
message ApbGetSetResp {
    repeated bytes value = 1;
}

//------------------
// LWW-register

// Register update
message ApbRegUpdate {
    required bytes value = 1;
}

// Response operation
message ApbGetRegResp {
    required bytes value = 1;
}

//------------------
// MV-register

// use ApbRegUpdate for updates

// response:
message ApbGetMVRegResp {
    repeated bytes values = 1;
}

//------------------
// Map


message ApbMapKey {
    required bytes key = 1;
    required CRDT_type type = 2;
}

message ApbMapUpdate {
    repeated ApbMapNestedUpdate updates = 1;
    repeated ApbMapKey removedKeys = 2;
}

message ApbMapNestedUpdate {
    required ApbMapKey key = 1;
    required ApbUpdateOperation update = 2;
}

message ApbGetMapResp {
    repeated ApbMapEntry entries = 1;
}

message ApbMapEntry {
    required ApbMapKey key = 1;
    required ApbReadObjectResp value = 2;
}

//-------------------
// Flags

message ApbFlagUpdate {
    required bool value = 1;
}

message ApbGetFlagResp {
    required bool value = 1;
}

// General reset operation
message ApbCrdtReset {

}

// Response operation
message ApbOperationResp {
    required bool success = 1;
    optional uint32 errorcode = 2;
}


//--------------------------------------------------------------

// Properties parameters of a transaction
message ApbTxnProperties {
    optional uint32 read_write = 1 ; //default = 0 = read_write, 1 = read_only, 2 = write_only
    optional uint32 red_blue = 2 ; // default = 0 = blue, 1 = red
    repeated bytes shared_locks = 3;
    repeated bytes exclusive_locks = 4;
}

// Object (Key) representation
message ApbBoundObject {
    required bytes key = 1;
    required CRDT_type type = 2;
    required bytes bucket = 3;
}

// Objects to be read
message ApbReadObjects {
    repeated ApbBoundObject boundobjects = 1;
    required bytes transaction_descriptor = 2;
}

// An Object to be updated with specified operation
message ApbUpdateOp {
    required ApbBoundObject boundobject = 1;
    required ApbUpdateOperation operation = 2;
}

message ApbUpdateOperation { // TODO use this above
    optional ApbCounterUpdate counterop = 1;
    optional ApbSetUpdate setop = 2;
    optional ApbRegUpdate regop = 3;
    optional ApbMapUpdate mapop = 5;
    optional ApbCrdtReset resetop = 6;
    optional ApbFlagUpdate flagop = 7;
}

// Objects to be updated
message ApbUpdateObjects {
    repeated ApbUpdateOp updates = 1;
    required bytes transaction_descriptor = 2;
}

// Start Transaction
message ApbStartTransaction {
    optional bytes timestamp = 1;
    optional ApbTxnProperties properties = 2;
}

// Abort Transaction
message ApbAbortTransaction {
    required bytes transaction_descriptor = 1;
}

// Commit Transaction
message ApbCommitTransaction {
    required bytes transaction_descriptor = 1;
}


message ApbStaticUpdateObjects{
    required ApbStartTransaction transaction = 1;
    repeated ApbUpdateOp updates = 2;
}

message ApbStaticReadObjects{
    required ApbStartTransaction transaction = 1;
    repeated ApbBoundObject objects = 2;
}

//Start transaction response
message ApbStartTransactionResp {
    required bool success = 1;
    optional bytes transaction_descriptor = 2;
    optional uint32 errorcode = 3;
}

//Read Objects Response
message ApbReadObjectResp {
    // one of the following:
    optional ApbGetCounterResp counter = 1;
    optional ApbGetSetResp set = 2;
    optional ApbGetRegResp reg = 3;
    optional ApbGetMVRegResp mvreg = 4;
    optional ApbGetMapResp map = 6;
    optional ApbGetFlagResp flag = 7;
}
message ApbReadObjectsResp {
    required bool success = 1;
    repeated ApbReadObjectResp objects = 2;
    optional uint32 errorcode = 3;
}

// Commit Response
message ApbCommitResp {
    required bool success = 1;
    optional bytes commit_time = 2;
    optional uint32 errorcode = 3;
}

message ApbStaticReadObjectsResp {
    required ApbReadObjectsResp objects = 1;
    required ApbCommitResp committime = 2;
}

//------------ Cluster Management API ---------

// Create a DC with multiple nodes
message ApbCreateDC {
  // name of antidote nodes of the form 'antidote@hostname' or 'antidote@ip'
  repeated string nodes = 1;
}

message ApbCreateDCResp {
  required bool success = 1;
  optional uint32 errorcode = 2;
}

// Get a connection descriptor of the DC to be given to other DCs.
message ApbGetConnectionDescriptor {
}

message ApbGetConnectionDescriptorResp {
  required bool success = 1;
  //structure of descriptor is internal to antidote.
  optional bytes descriptor = 2;
  optional uint32 errorcode = 3;
}

// Connect DC with each other to start replication.
// This message must be send to all DCs.
message ApbConnectToDCs {
  // descriptors is a list of connection information of all DCs obtained from ApbGetConnectionDescriptorResp.descriptor
    repeated bytes descriptors = 1;
}

message ApbConnectToDCsResp {
  required bool success = 1;
  optional uint32 errorcode = 2;
}
