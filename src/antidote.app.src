%% -*- erlang -*-
{application, antidote,
 [
  {description, "SyncFree reference platform"},
  {vsn, "0.0.1"},
  {registered, []},
  {applications, [
                  kernel,
                  stdlib,
                  riak_pb,
                  riak_api,
                  riak_core,
                  antidote_crdt,
                  antidote_utils,
                  cuttlefish,
                  riak_dt,
                  antidote_pb,
                  erlzmq,
                  rand_compat
                 ]},
  {mod, { antidote_app, []}},
  %% Options for environmental variables
  %% txn_cert:
  %%        true -> write operations are certified during commit, aborting the transaction if a write conflict is detected (i.e. snapshot isolation
  %%                is ensured for the updates within a single DC, updates across DCs are not checked)
  %%        false -> transactions perform no certification and always commit (outside of crashes/errors)
  %% txn_prot:
  %%        clocksi -> uses "Cure" protocol to define snapshots and causal dependencies (https://pages.lip6.fr/Marc.Shapiro/papers/Cure-final-ICDCS16.pdf)
  %%        gr -> uses "Gentle-rain like" protocol to define snapshots and causal dependencies (https://infoscience.epfl.ch/record/202079)
  %%        physics -> uses physiCS like protocol to define snapshots, causal dependencies and commitment protocol (https://pages.lip6.fr/Marc.Shapiro/papers/PhysiCS-NMSI-PaPoC-2016.pdf)
  %% recover_from_log:
  %%        true -> on node start will load any operations stored on the disk log to the in memory cache of the key-value store
  %%        false -> on node start the state of the key-value store will be empty
  %% recover_meta_data_on_start:
  %%        true -> meta-data state will be loaded from 1disk on restart including connection state between other DCs and node names and configurations,
  %%                nodes will automatically reconnect to other dcs on restart
  %%        false -> meta-data concering node names and connections to other dcs will not be loaded on restart
  %% sync_log:
  %%        true -> local transactions will be stored on log synchronously, i.e. when the reply is sent the updates are guaranteed to be
  %%                stored to disk (this is very slow in the current logging setup)
  %%        false -> all updates are sent to the operating system to be stored to disk (eventually), but are not guaranteed to be stored durably on disk
  %%                 when the reply is sent
  %% log_staleness:
  %%        true -> the materializer vnode will log staleness in log files that can later be processed.
  %%        false -> this option will be disabled.
     {env, [{txn_cert, false},
         {txn_prot, physics},
         {stable_strict, true},
         {max_freshness, true},
         {enable_logging, false},
         {recover_from_log, false},
         {recover_meta_data_on_start, false},
         {sync_log, false},
         {log_staleness, true}]}
 ]}.
