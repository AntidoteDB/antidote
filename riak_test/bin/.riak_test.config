%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-

%% ===============================================================
%%  Global configurations
%% ===============================================================

%% This section contains the configuration variables that will be
%% applied to all tests.
{default, [
    %% GiddyUp settings: If your tester needs to report results or
    %% fetch a test suite from GiddyUp, set these configs. The
    %% canonical GiddyUp host is currently giddyup.basho.com.
    %% Authentication is required to post results, so ask someone on
    %% Testing/Tools for the credentials if you need them.
    %% {giddyup_host, ""},
    %% {giddyup_user, ""},
    %% {giddyup_password, ""},

    %% The symbolic platform name used for reporting and fetching the
    %% suite. You won't likely need this unless you are actually
    %% submitting results to the scorecard, like on an automated
    %% builder. Typically this is in the format
    %% "NAME-VERSION-ARCHITECTURE". See GiddyUp for valid platform
    %% names.
    {platform, "osx-64"},

    %% riak_test includes various wait_for_X functions that will
    %% repeatedly test for specific conditions until they are
    %% satisfied. `rt_max_wait_time' specifies the maximum length, in
    %% milliseconds, that any condition can wait. `rt_retry_delay'
    %% specifies the time, in milliseconds, that will be between each
    %% test of the wait condition. On slower machines, these values
    %% should be increased.
    {rt_max_wait_time, 600000},
    {rt_retry_delay, 1000},

    %% The harness specifies how Riak nodes under test will be
    %% manipulated. There is currently only `rtdev', which uses local
    %% `devrel's inside a git repository. In the future, we may have
    %% harnesses that use SSH to connect to remote virtual machines.
    %% To set up the `rtdev' harness for the first time, use the shell
    %% scripts in the bin/ directory.
    {rt_harness, rtdev},

    %% The scratch directory specifies where riak_test will put
    %% temporary testing artifacts like client packages, git
    %% checkouts, etc.
    {rt_scratch_dir, "/tmp/riak_test_scratch"},

    %% The path to a prebuilt copy of basho_bench that tests can
    %% invoke. This was previously used in the `loaded_upgrade' test.
    {basho_bench, "/Users/cmeiklejohn/Basho/basho_bench"},

    %% The path to a corpus of spam emails to be used when testing
    %% Riak Search. This is typically expanded from the tarball
    %% included in riak_test.
    %% {spam_dir, "/Users/cmeiklejohn/Basho/riak_test/search-corpus/spam.0"},

    %% The number of workers-per-node to spawn when executing the
    %% `loaded_upgrade' test. If unspecified, this will default to
    %% `10'. For older/slower machines, use a lower number to avoid
    %% unexpected node crashes.
    {load_workers, 10},

    %% lager_level defaults to info, which is should mean 
    %% "relevant test output". debug level output is for helping
    %% test writers.
    {lager_level, info}
]}.

%% ===============================================================
%%  Project-specific configurations
%% ===============================================================

%% Floppystore
{antidote, [
    %% [See rtdev.rt_project above]
    {rt_project, "antidote"},

    %% Specific to replication tests, the size of the "A" cluster, or
    %% "source".
    {cluster_a_size, 3},

    %% The total number of nodes to deploy in replication tests.
    {num_nodes, 6},

    %% Name of executable.
    {exec_name, "antidote"},

    %% Cookie.
    {rt_cookie, antidote},

    %% Which order to upgrade nodes in the cluster when doing the
    %% `replication_upgrade' test. Valid values are:
    %% * "forwards" - from 1 to 6
    %% * "backwards" - from 6 to 1
    %% * "alternate" - e.g. 1, 4, 2, 5, 3, 6
    %% * "random" - shuffles the list
    %% {repl_upgrade_order, "forwards"},

    %% Path to yokozuna
    %% {yz_dir, "/Users/cmeiklejohn/Basho/riak_ee/deps/yokozuna"},
    %% {test_paths, ["/Users/cmeiklejohn/Basho/riak_ee/deps/yokozuna/riak_test/ebin"]},

    %% [See rtdev.rtdev_path above]
    {rtdev_path, [{root, "RTDEV_PATH"},
                  {current, "RTDEV_PATH/current"}]},

    {test_paths, ["TESTS_PATH/ebin"]}
]}.

%% Sample project to demonstrate use of local configs for the
%% "intercepts" feature. Generally, all intercepts are installed into
%% deployed nodes, but not activated.
{intercept_example,
 [
  %% Whether to load intercept modules into nodes that are deployed.
  %% `true' by default.
  {load_intercepts, true},

  %% Which intercepts to load. See the README for more detailed
  %% documentation about intercepts.
  {intercepts,
   [
    %% The intercepts take the form of:
    %%
    %% {ModuleToIntercept::module(), [
    %%   {{FunctionToIntercept::atom(), Arity::non_neg_integer()},
    %%    ReplacementFunction::atom()}
    %% ]}
    {riak_kv_vnode, [{{put,7}, dropped_put}]}
   ]}
 ]}.
