{application,antidote,
             [{description,"SyncFree reference platform"},
              {vsn,"1"},
              {registered,[]},
              {applications,[kernel,stdlib,riak_pb,riak_api,riak_core]},
              {mod,{antidote_app,[]}},
              {env,[{txn_cert,true},
                    {txn_prot,clocksi},
                    {recover_from_log,true},
                    {recover_meta_data_on_start,true},
                    {sync_log,false}]},
              {modules,[antidote,antidote_app,antidote_console,antidote_hooks,
                        antidote_node_event_handler,antidote_pb_txn,
                        antidote_ring_event_handler,antidote_sup,
                        clocksi_downstream, clocksi_interactive_coord,
                        clocksi_interactive_coord_sup,
                        clocksi_interactive_coord_worker_sup,
                        clocksi_materializer,clocksi_readitem_server,
                        clocksi_readitem_sup,clocksi_static_tx_coord_fsm,
                        clocksi_static_tx_coord_sup,
                        clocksi_static_tx_coord_worker_sup,
                        clocksi_vnode,crdt_bcounter,
                        crdt_orset,crdt_pncounter,crdt_rga,
                        dc_meta_data_utilities,dc_utilities,
                        inter_dc_dep_vnode,inter_dc_log_reader_query,
                        inter_dc_log_reader_response,
                        inter_dc_log_sender_vnode,inter_dc_manager,
                        inter_dc_pub,inter_dc_sub,inter_dc_sub_buf,
                        inter_dc_sub_vnode,inter_dc_txn,log_txn_assembler,
                        log_utilities,logging_vnode,materializer,
                        materializer_vnode,meta_data_manager,
                        meta_data_manager_sup,meta_data_sender,
                        meta_data_sender_sup,mock_partition_fsm,riak_dt_mvreg,
                        stable_meta_data_server,stable_time_functions,
                        vector_orddict,vectorclock,vectorclock_vnode,
                        wait_init,zmq_context,zmq_utils]}]}.
